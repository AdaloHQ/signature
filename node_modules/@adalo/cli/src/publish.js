const path = require('path')
const os = require('os')
const fs = require('fs')
const util = require('util')
const chalk = require('chalk')
const axios = require('axios')
const FormData = require('form-data')
const inquirer = require('inquirer')

const readFile = util.promisify(fs.readFile)

// utils
const { validatePackage, formatName } = require('./utils/publishing')

const publishLibrary = require('./lib/publish')
const deployLibrary = require('./lib/deploy')
const build = require('./build')

const publish = (module.exports = async (args, opts) => {
  let marketplaceURL = 'https://component-registry.herokuapp.com'
  if (opts.local) {
    marketplaceURL =
      process.env.MARKETPLACE_URL ||
      process.env.REGISTRY_URL ||
      'http://localhost:8000'
  }
  const url = `${marketplaceURL}/api/libraries`
  const validateURL = `${marketplaceURL}/api/libraries/validate`

  const ignoreLogo = opts['ignore-logo']

  try {
    // prep
    const packagePath = path.join(process.cwd(), 'package.json')
    const pkg = JSON.parse(await readFile(packagePath))
    const config = pkg.adalo || pkg.proton
    const components = JSON.stringify(config.components.map((c) => c.name))

    // start publishing process
    console.clear()
    console.log('')
    console.log(chalk.bold('  Adalo Marketplace'))
    console.log('')

    // 1. validate package.json configuration
    await validatePackage(pkg, { ignoreLogo })

    const { name, version } = pkg

    // 2. validate library
    let {
      data: { isNewLibrary, public },
    } = await axios.post(validateURL, {
      version,
      name,
    })

    let status = public ? 'public' : 'private'

    // 2.1 if library is new, prompt user for public or private
    if (isNewLibrary) {
      const answers = await inquirer.prompt([
        {
          type: 'list',
          name: 'status',
          message: 'Is your library public or private?',
          choices: ['public', 'private'],
          default: 'private',
        },
      ])

      status = answers.status
    }

    // 3. run build command
    await build(null, { ignoreLogo })

    // 4. initialize form
    const form = new FormData()

    // 5. append data to form
    form.append('name', name)
    form.append('displayName', config.displayName)
    form.append('npm', formatName(pkg.name))
    form.append('description', pkg.description)
    form.append('author', pkg.author)
    form.append('version', version)
    form.append('components', components)
    form.append('status', status)

    // 6. get compressed "library" and append to form
    const file = await publishLibrary(pkg)
    form.append('library', file)

    // 7. get "dist" files and append to form
    const dist = await deployLibrary(pkg, { ignoreLogo })
    form.append('dist', dist)

    // 8. publish library
    console.info(
      `  Publishing ${name}@${version} to Adalo. This may take a few minutes...`
    )
    await axios.post(url, form, { headers: form.getHeaders() })
    console.info(`  Successfully published ${name}@${version} to Adalo. ðŸš€`)
  } catch (error) {
    console.error('')
    console.error(chalk.bold.red('  Oh no, something went wrong:'))
    console.error('')
    if (error.response) {
      console.error(`  - ${error.response.data.message}`)
    } else if (error.request) {
      console.error(`  - ${error.request.data.message}`)
    } else {
      console.error(`  - ${error}`)
    }
    console.error('')
    console.error(
      chalk.bold(
        `  For assistance publishing please visit ${chalk.italic.blue(
          'https://developers.adalo.com'
        )}`
      )
    )
    console.error('')

    process.exit(1)
  }
})
